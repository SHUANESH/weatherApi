{"version":3,"sources":["components/Service/Service.jsx","components/Features/GetWeather/GetWeather.jsx","App.js","reportWebVitals.js","index.js"],"names":["GetFetchFunction","city","fetch","process","then","response","json","jsonObj","error","Continuer","styled","div","InputDiv","Input","input","GetWeather","useState","arrayApiWeather","setArrayApiWeather","arrayCityFromApi","setArrayCityFromApi","setArrayCityFromJson","cityMatch","setCityMatch","disappear","setDisappear","ShowWeather","e","CityValue","target","innerText","console","log","useEffect","res","GetJsonOfCity","GetApiOfCity","data","DivSpan","htmlFor","type","name","value","onChange","inputValue","matches","filter","location","regex","RegExp","toLowerCase","length","match","map","item","index","onClick","main","temp","weather","description","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAOO,SAASA,EAAiBC,GAC7B,IACE,OAAOC,MAAM,GAAD,OARDC,sDAQC,OAAeF,EAAf,kBAPFE,qCAQRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAIA,KAEpB,MAAMC,GACH,OAAOA,G,mBCTRC,EAAYC,IAAOC,IAAV,gIAUTC,EAAWF,IAAOC,IAAV,yJAURE,EAAQH,IAAOI,MAAV,+JAQI,SAASC,IACpB,MAA+CC,qBAA/C,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAiDF,qBAAjD,mBAAOG,EAAP,KAA0BC,EAA1B,KACA,EAAmDJ,qBAAnD,mBAA2BK,GAA3B,WACA,EAAmCL,mBAAS,IAA5C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAA2BP,qBAA3B,mBAAOF,EAAP,KACA,GADA,KACmCE,oBAAS,IAA5C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAmCEC,EAAc,SAACC,GACjB,IAAIC,EAAYD,EAAEE,OAAOC,UACzBL,EAAaG,GACbL,EAAa,IACbvB,EAAiB4B,GAAWxB,MAAK,SAACC,GAAD,OAAca,EAAmBb,MAClE0B,QAAQC,IAAIf,IAIhBgB,qBAAU,YDhEF,WAEA,IACG,OAAO/B,MAAM,iBACXE,MAAM,SAAA8B,GAAG,OAAGA,EAAI5B,UAChBF,MAAM,SAAAG,GAAO,OAAGA,KAErB,MAAMC,GACFuB,QAAQC,IAAIxB,KC0DvB2B,GAAgB/B,MAAK,SAACC,GAAD,OAAcgB,EAAqBhB,ODrDlD,WAEH,IACG,OAAOH,MAAM,mEACXE,MAAM,SAAA8B,GAAG,OAAGA,EAAI5B,UAChBF,MAAM,SAAAG,GAAO,OAAGA,KAGrB,MAAMC,GACFuB,QAAQC,IAAIxB,KC6CH4B,GAAehC,MAAK,SAACC,GAAe,OAAOe,EAAoBf,EAASgC,WAEtF,IAEH,IAAMC,EAAU5B,IAAOC,IAAV,6HAQT,OACI,cAACF,EAAD,UACW,gCACG,6CAEA,eAACG,EAAD,WAED,uBAAO2B,QAAQ,GAAf,+BACE,cAAC1B,EAAD,CAAO2B,KAAK,OAAOC,KAAK,OAAOC,MAAO5B,EAAO6B,SApD9C,SAAChB,GACnB,IAAIiB,EAAajB,EAAEE,OAAOa,MACtBG,EAAU1B,EAAiB2B,QAAO,SAACC,GACvC,IAAMC,EAAQ,IAAIC,OAAJ,WAAeL,EAAWM,gBACxC,GAAGN,EAAWO,OAAS,EACnB,OAAOJ,EAAS9C,KAAKiD,cAAcE,MAAMJ,MAIhDzB,EAAasB,MAwCQ,OAKEvB,QALF,IAKEA,OALF,EAKEA,EAAW+B,KAAI,SAACC,EAAOC,GACjB,OAAO,cAACjB,EAAD,UACE,sBAAMkB,QAAS9B,EAAf,SAA6B4B,EAAKrD,QADtBsD,MAKrB,mDAAsB/B,KACtB,iDAAaP,QAAb,IAAaA,OAAb,EAAaA,EAAiBwC,KAAKC,QACnC,sCAAOzC,QAAP,IAAOA,OAAP,EAAOA,EAAiB0C,QAAQ,GAAGC,sBCzGlDC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACG,cAAC/C,EAAD,OCMQgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cb433841.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nconst API_HTTP = process.env.REACT_APP_API_HTTP;\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\n//  console.log(API_HTTP);\r\n//  console.log(API_KEY);\r\n\r\nexport function GetFetchFunction(city){\r\n    try{\r\n      return fetch(`${API_HTTP}${city}&appid=${API_KEY}`)\r\n       .then(response => response.json())\r\n       .then(jsonObj => jsonObj)\r\n    }\r\n    catch(error){\r\n       return error;\r\n    }\r\n\r\n   }\r\n\r\n export function GetJsonOfCity(){\r\n\r\n        try{\r\n           return fetch(\"JsonCity.json\")\r\n            .then( res=> res.json())\r\n            .then( jsonObj=> jsonObj)\r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n        }\r\n\r\n}\r\n\r\nexport function GetApiOfCity(){\r\n\r\n    try{\r\n       return fetch(\"https://countriesnow.space/api/v0.1/countries/population/cities\")\r\n        .then( res=> res.json())\r\n        .then( jsonObj=> jsonObj)\r\n        // .then((E)=>{console.log(E.data);})\r\n    }\r\n    catch(error){\r\n        console.log(error);\r\n    }\r\n\r\n}","import React, {useEffect , useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport {GetJsonOfCity , GetFetchFunction , GetApiOfCity} from '../../Service/Service';\r\n\r\n\r\nconst Continuer = styled.div`\r\nbackground-color: #b6fffa;\r\ndisplay: flex;\r\njustify-content: center;\r\nwidth: 100vw;\r\nheight:100vh;\r\n`\r\n\r\n\r\n\r\nconst InputDiv = styled.div`\r\n\r\nwidth: 50vw;\r\njustify-content: center;\r\nalign-items: center;\r\ndisplay: flex;\r\nflex-direction: column;\r\nborder-radius:5px;\r\n`\r\n\r\nconst Input = styled.input`\r\nwidth: 20vw;\r\nborder: solid 0px;\r\nmargin-top:30px;\r\nmargin-bottom: 30px;\r\nfont-size: 20px;\r\nbox-shadow: 2px 1px 15px 4px #ffffff;\r\n`\r\nexport default function GetWeather() {\r\n    const [arrayApiWeather , setArrayApiWeather] = useState();\r\n    const [arrayCityFromApi , setArrayCityFromApi] = useState()\r\n    const [arrayCityFromJson , setArrayCityFromJson] = useState();\r\n    const [cityMatch , setCityMatch] = useState([]);\r\n    const [input , setInput] = useState();\r\n    const [disappear , setDisappear] = useState(false);\r\n\r\n   const searchFromJson = (e) =>{\r\n    let matches = arrayCityFromJson.data.filter((city)=>{  \r\n    const regex = new RegExp(`^${e.target.value}`);\r\n    if(e.target.value.length > 0){\r\n        return city.name.match(regex);\r\n    }\r\n    \r\n });\r\n setCityMatch(matches);\r\n}\r\n\r\n\r\n\r\nconst searchFromApi = (e) => {\r\n    let inputValue = e.target.value\r\n    let matches = arrayCityFromApi.filter((location) => {\r\n    const regex = new RegExp(`^${inputValue.toLowerCase()}`);\r\n    if(inputValue.length > 0){\r\n        return location.city.toLowerCase().match(regex);\r\n    }\r\n    \r\n });\r\n setCityMatch(matches);\r\n}\r\n\r\nconst CityOnClickInformation = (e) => {\r\n    let CityValue = e.target.innerText;\r\n    GetFetchFunction(CityValue);\r\n    console.log(CityValue);\r\n    let aa = arrayCityFromApi.find((item)=>{return item.city === CityValue})\r\n    console.log(aa.populationCounts.map((item => item.value[0])));\r\n}\r\n\r\nconst ShowWeather = (e)=> {\r\n    let CityValue = e.target.innerText;\r\n    setDisappear(CityValue)\r\n    setCityMatch([]);\r\n    GetFetchFunction(CityValue).then((response) => setArrayApiWeather(response));\r\n    console.log(arrayApiWeather); \r\n    \r\n}\r\n\r\nuseEffect(() => {\r\n \r\n GetJsonOfCity().then((response) => setArrayCityFromJson(response));\r\n const getData = GetApiOfCity().then((response) => { return setArrayCityFromApi(response.data)});\r\n\r\n}, [])\r\n\r\nconst DivSpan = styled.div`\r\ncursor: pointer;\r\nfont-size: 20px;\r\nbackground-color: yellow;\r\nmargin-top: 20px;\r\npadding: 5px;\r\n`\r\n   \r\n    return (\r\n        <Continuer>\r\n                   <div>\r\n                      <h1>City search</h1>\r\n\r\n                      <InputDiv>\r\n                     \r\n                     <label htmlFor=\"\">Enter a city name</label>\r\n                       <Input type=\"text\" name=\"city\" value={input} onChange={searchFromApi}/>\r\n                           \r\n                       {cityMatch?.map((item , index)=>{\r\n                              return <DivSpan key={index}>\r\n                                       <span onClick={ShowWeather}>{item.city}</span>\r\n                                     </DivSpan>\r\n\r\n                        })}\r\n                              <span>Selected city: {disappear}</span>\r\n                              <span>Temp: {arrayApiWeather?.main.temp}</span>\r\n                              <span>{arrayApiWeather?.weather[0].description}</span>\r\n                      </InputDiv>\r\n            \r\n\r\n                       </div>\r\n\r\n        </Continuer>\r\n    )\r\n}","import './App.css';\nimport GetWeather from './components/Features/GetWeather/GetWeather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <GetWeather/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}